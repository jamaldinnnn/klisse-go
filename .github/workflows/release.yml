name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    
    outputs:
      release_name: ${{ steps.prepare.outputs.release_name }}
      release_path: ${{ steps.prepare.outputs.release_path }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.0' # Matches go.mod
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev pkg-config
        # Create compatibility for webkit2gtk-4.0
        if ! pkg-config --exists webkit2gtk-4.0; then
          sudo mkdir -p /usr/lib/x86_64-linux-gnu/pkgconfig
          # Create a compatibility .pc file for webkit2gtk-4.0 pointing to 4.1
          sudo cp /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc
          sudo sed -i 's/webkit2gtk-4\.1/webkit2gtk-4.0/g' /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc
        fi
        # Create library symlinks for linker
        if [ ! -f /usr/lib/x86_64-linux-gnu/libwebkit2gtk-4.0.so ]; then
          sudo ln -sf /usr/lib/x86_64-linux-gnu/libwebkit2gtk-4.1.so* /usr/lib/x86_64-linux-gnu/ || true
          sudo find /usr/lib/x86_64-linux-gnu/ -name "libwebkit2gtk-4.1.so*" -exec bash -c 'sudo ln -sf "$1" "${1/4.1/4.0}"' _ {} \; || true
        fi
    
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
    
    - name: Build Wails app
      run: wails build -clean
    
    - name: Prepare artifact info
      id: prepare
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          echo "release_name=klisse-windows-amd64.exe" >> $GITHUB_OUTPUT
          echo "release_path=build/bin/klisse.exe" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          echo "release_name=klisse-linux-amd64" >> $GITHUB_OUTPUT
          echo "release_path=build/bin/klisse" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          # Zip the .app for easier distribution
          ditto -c -k --sequesterRsrc --keepParent build/bin/klisse.app klisse-macos-universal.zip
          echo "release_name=klisse-macos-universal.zip" >> $GITHUB_OUTPUT
          echo "release_path=klisse-macos-universal.zip" >> $GITHUB_OUTPUT
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.prepare.outputs.release_name }}
        path: ${{ steps.prepare.outputs.release_path }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/klisse-windows-amd64.exe/klisse-windows-amd64.exe
            artifacts/klisse-linux-amd64/klisse-linux-amd64
            artifacts/klisse-macos-universal.zip/klisse-macos-universal.zip